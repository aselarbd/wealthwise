{
	"info": {
		"_postman_id": "12345678-1234-1234-1234-123456789abc",
		"name": "WealthWise API Collection - Updated v2.0",
		"description": "Complete API collection for testing WealthWise NetWorth endpoints with latest API structure and token authentication",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{auth_token}}",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "base_url",
			"value": "http://127.0.0.1:8000",
			"type": "string",
			"description": "Base URL for the Django development server"
		},
		{
			"key": "api_version",
			"value": "api/v1",
			"type": "string",
			"description": "API version path"
		},
		{
			"key": "auth_token",
			"value": "",
			"type": "string",
			"description": "Authentication token - set this after getting token from Django admin"
		},
		{
			"key": "asset_id",
			"value": "1",
			"type": "string",
			"description": "ID of an asset for testing detail endpoints"
		},
		{
			"key": "liability_id",
			"value": "1",
			"type": "string",
			"description": "ID of a liability for testing detail endpoints"
		}
	],
	"item": [
		{
			"name": "Authentication",
			"description": "Token-based authentication setup and testing",
			"item": [
				{
					"name": "Test Authentication",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"description": "Bearer token authentication"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{api_version}}/networth/summary/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{api_version}}",
								"networth",
								"summary",
								""
							]
						},
						"description": "Test if your authentication token is working by calling the summary endpoint"
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Authentication successful', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains auth required fields', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('total_assets');",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "NetWorth Summary",
			"description": "Financial summary and overview endpoints",
			"item": [
				{
					"name": "Get NetWorth Summary",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{api_version}}/networth/summary/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{api_version}}",
								"networth",
								"summary",
								""
							]
						},
						"description": "Get complete net worth summary including total assets, liabilities, net worth, and assets by category with enhanced display names"
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has required summary fields', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('total_assets');",
									"    pm.expect(responseJson).to.have.property('total_liabilities');",
									"    pm.expect(responseJson).to.have.property('net_worth');",
									"    pm.expect(responseJson).to.have.property('assets_by_category');",
									"});",
									"",
									"pm.test('Assets by category has enhanced display names', function () {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.assets_by_category.length > 0) {",
									"        pm.expect(responseJson.assets_by_category[0]).to.have.property('asset_category_display');",
									"    }",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Assets",
			"description": "Asset management endpoints with updated categories",
			"item": [
				{
					"name": "List Assets (Paginated)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{api_version}}/networth/assets/?page=1&page_size=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{api_version}}",
								"networth",
								"assets",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "Page number (default: 1)"
								},
								{
									"key": "page_size",
									"value": "20",
									"description": "Items per page (default: 20)"
								}
							]
						},
						"description": "Get paginated list of assets for the current user's group"
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has pagination structure', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('count');",
									"    pm.expect(responseJson).to.have.property('assets');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Create Asset - Savings",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Emergency Fund\",\n    \"value\": \"10000.00\",\n    \"asset_category\": \"SAVINGS\",\n    \"item_type\": \"ASSET\",\n    \"description\": \"6-month emergency fund in high-yield savings account\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/{{api_version}}/networth/assets/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{api_version}}",
								"networth",
								"assets",
								""
							]
						},
						"description": "Create a savings asset. Valid categories: SAVINGS, INVESTMENT, REAL_ESTATE, PERSONAL, OTHER"
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Asset created successfully', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response contains asset data', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson.name).to.equal('Emergency Fund');",
									"    pm.expect(responseJson.asset_category).to.equal('SAVINGS');",
									"    pm.expect(responseJson.item_type).to.equal('ASSET');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Create Asset - Investment",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"401k Portfolio\",\n    \"value\": \"45000.00\",\n    \"asset_category\": \"INVESTMENT\",\n    \"item_type\": \"ASSET\",\n    \"description\": \"Employer 401k retirement account with index funds\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/{{api_version}}/networth/assets/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{api_version}}",
								"networth",
								"assets",
								""
							]
						},
						"description": "Create an investment asset"
					}
				},
				{
					"name": "Create Asset - Real Estate",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Primary Residence\",\n    \"value\": \"350000.00\",\n    \"asset_category\": \"REAL_ESTATE\",\n    \"item_type\": \"ASSET\",\n    \"description\": \"Main family home - estimated market value\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/{{api_version}}/networth/assets/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{api_version}}",
								"networth",
								"assets",
								""
							]
						},
						"description": "Create a real estate asset"
					}
				},
				{
					"name": "Create Asset - Personal",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Jewelry Collection\",\n    \"value\": \"5000.00\",\n    \"asset_category\": \"PERSONAL\",\n    \"item_type\": \"ASSET\",\n    \"description\": \"Valuable jewelry and watches\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/{{api_version}}/networth/assets/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{api_version}}",
								"networth",
								"assets",
								""
							]
						},
						"description": "Create a personal asset"
					}
				},
				{
					"name": "Get Asset Details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{api_version}}/networth/assets/{{asset_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{api_version}}",
								"networth",
								"assets",
								"{{asset_id}}",
								""
							]
						},
						"description": "Get details of a specific asset by ID"
					}
				},
				{
					"name": "Update Asset (PUT)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Emergency Fund\",\n    \"value\": \"12000.00\",\n    \"asset_category\": \"SAVINGS\",\n    \"item_type\": \"ASSET\",\n    \"description\": \"Increased emergency fund target to 8 months\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/{{api_version}}/networth/assets/{{asset_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{api_version}}",
								"networth",
								"assets",
								"{{asset_id}}",
								""
							]
						},
						"description": "Complete update of an existing asset"
					}
				},
				{
					"name": "Partial Update Asset (PATCH)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"value\": \"15000.00\",\n    \"description\": \"Monthly contributions increased fund value\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/{{api_version}}/networth/assets/{{asset_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{api_version}}",
								"networth",
								"assets",
								"{{asset_id}}",
								""
							]
						},
						"description": "Partial update - only update specific fields"
					}
				},
				{
					"name": "Delete Asset",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{api_version}}/networth/assets/{{asset_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{api_version}}",
								"networth",
								"assets",
								"{{asset_id}}",
								""
							]
						},
						"description": "Delete a specific asset"
					}
				}
			]
		},
		{
			"name": "Liabilities",
			"description": "Liability management endpoints",
			"item": [
				{
					"name": "List Liabilities (Paginated)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{api_version}}/networth/liabilities/?page=1&page_size=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{api_version}}",
								"networth",
								"liabilities",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "Page number (default: 1)"
								},
								{
									"key": "page_size",
									"value": "20",
									"description": "Items per page (default: 20)"
								}
							]
						},
						"description": "Get paginated list of liabilities for the current user's group"
					}
				},
				{
					"name": "Create Liability - Credit Card",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Credit Card Debt\",\n    \"value\": \"3500.00\",\n    \"item_type\": \"LIABILITY\",\n    \"description\": \"Main credit card balance - 18% APR\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/{{api_version}}/networth/liabilities/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{api_version}}",
								"networth",
								"liabilities",
								""
							]
						},
						"description": "Create a credit card liability"
					}
				},
				{
					"name": "Create Liability - Student Loan",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Student Loan\",\n    \"value\": \"25000.00\",\n    \"item_type\": \"LIABILITY\",\n    \"description\": \"Federal student loan - remaining balance\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/{{api_version}}/networth/liabilities/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{api_version}}",
								"networth",
								"liabilities",
								""
							]
						},
						"description": "Create a student loan liability"
					}
				},
				{
					"name": "Create Liability - Mortgage",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Home Mortgage\",\n    \"value\": \"280000.00\",\n    \"item_type\": \"LIABILITY\",\n    \"description\": \"30-year fixed mortgage on primary residence\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/{{api_version}}/networth/liabilities/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{api_version}}",
								"networth",
								"liabilities",
								""
							]
						},
						"description": "Create a mortgage liability"
					}
				},
				{
					"name": "Get Liability Details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{api_version}}/networth/liabilities/{{liability_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{api_version}}",
								"networth",
								"liabilities",
								"{{liability_id}}",
								""
							]
						},
						"description": "Get details of a specific liability by ID"
					}
				},
				{
					"name": "Update Liability (PUT)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Credit Card\",\n    \"value\": \"3000.00\",\n    \"item_type\": \"LIABILITY\",\n    \"description\": \"Reduced balance after payment\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/{{api_version}}/networth/liabilities/{{liability_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{api_version}}",
								"networth",
								"liabilities",
								"{{liability_id}}",
								""
							]
						},
						"description": "Complete update of an existing liability"
					}
				},
				{
					"name": "Partial Update Liability (PATCH)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"value\": \"2500.00\",\n    \"description\": \"Made additional payment toward principal\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/{{api_version}}/networth/liabilities/{{liability_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{api_version}}",
								"networth",
								"liabilities",
								"{{liability_id}}",
								""
							]
						},
						"description": "Partial update - only update specific fields"
					}
				},
				{
					"name": "Delete Liability",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/{{api_version}}/networth/liabilities/{{liability_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{api_version}}",
								"networth",
								"liabilities",
								"{{liability_id}}",
								""
							]
						},
						"description": "Delete a specific liability"
					}
				}
			]
		},
		{
			"name": "Error Testing & Validation",
			"description": "Test various error scenarios and validation rules",
			"item": [
				{
					"name": "Invalid Asset Category",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test Asset\",\n    \"value\": \"1000.00\",\n    \"asset_category\": \"INVALID_CATEGORY\",\n    \"item_type\": \"ASSET\",\n    \"description\": \"This should fail validation\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/{{api_version}}/networth/assets/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{api_version}}",
								"networth",
								"assets",
								""
							]
						},
						"description": "Test invalid asset category validation (should return 400)"
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validation error for invalid category', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Error message mentions asset_category', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(JSON.stringify(responseJson)).to.include('asset_category');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Missing Required Fields",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"Missing name, value, asset_category, and item_type\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/{{api_version}}/networth/assets/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{api_version}}",
								"networth",
								"assets",
								""
							]
						},
						"description": "Test missing required fields validation (should return 400)"
					}
				},
				{
					"name": "Missing item_type Field",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test Asset\",\n    \"value\": \"1000.00\",\n    \"asset_category\": \"SAVINGS\",\n    \"description\": \"Missing item_type field\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/{{api_version}}/networth/assets/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{api_version}}",
								"networth",
								"assets",
								""
							]
						},
						"description": "Test missing item_type field (required in current API)"
					}
				},
				{
					"name": "Negative Value",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test Asset\",\n    \"value\": \"-1000.00\",\n    \"asset_category\": \"SAVINGS\",\n    \"item_type\": \"ASSET\",\n    \"description\": \"Negative value should fail validation\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/{{api_version}}/networth/assets/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{api_version}}",
								"networth",
								"assets",
								""
							]
						},
						"description": "Test negative value validation (should return 400)"
					}
				},
				{
					"name": "Unauthorized Access (No Token)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{api_version}}/networth/summary/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{api_version}}",
								"networth",
								"summary",
								""
							]
						},
						"description": "Test unauthorized access without token (should return 401)"
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Unauthorized without token', function () {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"exec": [
					"// Global pre-request script",
					"// Runs before each request",
					"console.log('Making request to: ' + pm.request.url);",
					"",
					"// Check if auth token is set for authenticated requests",
					"const authHeader = pm.request.headers.get('Authorization');",
					"if (authHeader && authHeader.includes('{{auth_token}}') && !pm.collectionVariables.get('auth_token')) {",
					"    console.warn('WARNING: auth_token variable is not set. Please set your authentication token.');",
					"}"
				],
				"type": "text/javascript"
			}
		},
		{
			"listen": "test",
			"script": {
				"exec": [
					"// Global test script",
					"// Runs after each request",
					"",
					"// Check if response is JSON (for non-delete requests)",
					"if (pm.request.method !== 'DELETE' && pm.response.code !== 204) {",
					"    pm.test('Response is JSON', function () {",
					"        pm.response.to.be.json;",
					"    });",
					"}",
					"",
					"// Check response time",
					"pm.test('Response time is reasonable (< 3000ms)', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(3000);",
					"});",
					"",
					"// Log response status for debugging",
					"console.log('Response status: ' + pm.response.status);"
				],
				"type": "text/javascript"
			}
		}
	]
}
